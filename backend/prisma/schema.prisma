generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  firstName    String
  lastName     String
  login        String    @unique
  email        String?   @unique
  phoneNumber  String?
  birthDate    DateTime?
  passwordHash String
  isActive     Boolean   @default(true)
  lastLogin    DateTime?
  lastActivity DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  userRoles       UserRole[]
  userPermissions UserPermission[]
  refreshTokens   RefreshToken[]

  auditLogs    AuditLog[]    @relation("UserAuditLogs")
  workSessions WorkSession[] @relation("UserWorkSessions")
  leaves       Leave[]       @relation("UserLeaves")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id          String   @id @default(uuid())
  module      String
  action      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@unique([module, action])
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

model RolePermission {
  id           String   @id @default(uuid())
  roleId       String
  permissionId String
  value        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model UserPermission {
  id           String   @id @default(uuid())
  userId       String
  permissionId String
  value        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation("UserAuditLogs", fields: [userId], references: [id])
  action    String
  module    String
  targetId  String?
  meta      Json?
  createdAt DateTime @default(now())
}

model WorkSession {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation("UserWorkSessions", fields: [userId], references: [id])
  startTime     DateTime
  endTime       DateTime?
  totalDuration Int? // Duration in seconds
  status        String // "active", "completed"
  breaks        Break[]
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([startTime])
}

model Break {
  id          String      @id @default(uuid())
  sessionId   String
  workSession WorkSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  startTime   DateTime
  endTime     DateTime?
  duration    Int? // Duration in seconds
  status      String // "active", "completed"
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([sessionId])
}

model TimeTrackingSettings {
  id                 String   @id @default(uuid())
  enableBreakButton  Boolean  @default(true)
  minSessionDuration Int      @default(0) // Minimum session duration in minutes
  maxSessionDuration Int      @default(720) // Maximum session duration in minutes (12 hours)
  maxBreakDuration   Int      @default(60) // Maximum break duration in minutes
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model LeaveType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  paid        Boolean  @default(true)
  color       String   @default("#4F46E5") // Color code for calendar visualization
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  leaves Leave[]
}

model Leave {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation("UserLeaves", fields: [userId], references: [id])
  leaveTypeId String
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id])
  startDate   DateTime
  endDate     DateTime
  halfDay     Boolean   @default(false)
  morning     Boolean? // If halfDay is true, morning=true means first half, false means second half
  status      String // "pending", "approved", "rejected"
  notes       String?
  approvedBy  String? // Optional reference to the user who approved this leave
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([startDate, endDate])
}
