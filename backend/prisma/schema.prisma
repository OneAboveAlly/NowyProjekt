generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  firstName    String
  lastName     String
  login        String    @unique
  email        String?   @unique
  phoneNumber  String?
  birthDate    DateTime?
  passwordHash String
  isActive     Boolean   @default(true)
  lastLogin    DateTime?
  lastActivity DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  userRoles       UserRole[]
  userPermissions UserPermission[]
  refreshTokens   RefreshToken[]

  auditLogs        AuditLog[]     @relation("UserAuditLogs")
  workSessions     WorkSession[]  @relation("UserWorkSessions")
  leaves           Leave[]        @relation("UserLeaves")
  notifications    Notification[]
  sentMessages     Message[]      @relation("senderMessages")
  receivedMessages Message[]      @relation("receiverMessages")

  createdGuides         ProductionGuide[]      @relation("CreatedGuides")
  stepComments          StepComment[]
  commentRecipients     CommentRecipient[]
  stepWorkSessions      StepWorkSession[]
  inventoryTransactions InventoryTransaction[]
  createdInventoryItems InventoryItem[]        @relation("CreatedInventoryItems")
  Attachment            Attachment[]
  assignedGuides        GuideAssignment[]
  stepAssignments       StepAssignment[]

  // Relations from the updated schema
  stepWorkEntries      StepWorkEntry[]
  guideChangeHistories GuideChangeHistory[]

  // OCR relation
  ocrResults OcrResult[]

  // New relation for archived guides
  archivedGuides ProductionGuide[] @relation("ArchivedGuides")

  // Add these new relations
  withdrawnItems  GuideInventory[] @relation("WithdrawnItems")
  guideAccessLogs GuideAccessLog[] @relation("UserGuideAccessLogs")

  // New relation for quality checks
  qualityChecks QualityCheck[]

  // New relation for production scheduling
  productionSchedules ProductionSchedule[]
  scheduleAssignments ScheduleAssignment[]
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id          String   @id @default(uuid())
  module      String
  action      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@unique([module, action])
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

model RolePermission {
  id           String   @id @default(uuid())
  roleId       String
  permissionId String
  value        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model UserPermission {
  id           String   @id @default(uuid())
  userId       String
  permissionId String
  value        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation("UserAuditLogs", fields: [userId], references: [id])
  action    String
  module    String
  targetId  String?
  meta      Json?
  createdAt DateTime @default(now())
}

model WorkSession {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation("UserWorkSessions", fields: [userId], references: [id])
  startTime     DateTime
  endTime       DateTime?
  totalDuration Int? // Duration in seconds
  status        String // "active", "completed"
  breaks        Break[]
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([startTime])
}

model Break {
  id          String      @id @default(uuid())
  sessionId   String
  workSession WorkSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  startTime   DateTime
  endTime     DateTime?
  duration    Int? // Duration in seconds
  status      String // "active", "completed"
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([sessionId])
}

model TimeTrackingSettings {
  id                 String   @id @default(uuid())
  enableBreakButton  Boolean  @default(true)
  minSessionDuration Int      @default(0) // Minimum session duration in minutes
  maxSessionDuration Int      @default(720) // Maximum session duration in minutes (12 hours)
  maxBreakDuration   Int      @default(60) // Maximum break duration in minutes
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model LeaveType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  paid        Boolean  @default(true)
  color       String   @default("#4F46E5") // Color code for calendar visualization
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  leaves Leave[]
}

model Leave {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation("UserLeaves", fields: [userId], references: [id])
  leaveTypeId String
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id])
  startDate   DateTime
  endDate     DateTime
  halfDay     Boolean   @default(false)
  morning     Boolean? // If halfDay is true, morning=true means first half, false means second half
  status      String // "pending", "approved", "rejected"
  notes       String?
  approvedBy  String? // Optional reference to the user who approved this leave
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  @@index([userId])
  @@index([startDate, endDate])
}

// 1. Powiadomienia
model Notification {
  id          String           @id @default(cuid())
  content     String
  link        String
  isRead      Boolean          @default(false)
  isArchived  Boolean          @default(false)
  userId      String
  type        NotificationType @default(SYSTEM)
  archived    Boolean          @default(false)
  createdAt   DateTime         @default(now())
  isSent      Boolean          @default(false) // ðŸ†• czy wysÅ‚ane (dla scheduled)
  scheduledAt DateTime? // ðŸ†• kiedy ma byÄ‡ wysÅ‚ane
  createdById String // kto utworzyÅ‚

  user User @relation(fields: [userId], references: [id])
}

enum NotificationType {
  SYSTEM
  EMAIL
  SMS
}

// 2. Komunikator
model Message {
  id                String              @id @default(cuid())
  content           String
  senderId          String
  receiverId        String
  isRead            Boolean             @default(false)
  deletedBySender   Boolean             @default(false)
  deletedByReceiver Boolean             @default(false)
  isDeleted         Boolean             @default(false) // Nowe pole do oznaczania usuniÄ™tych wiadomoÅ›ci
  createdAt         DateTime            @default(now())
  sender            User                @relation("senderMessages", fields: [senderId], references: [id])
  receiver          User                @relation("receiverMessages", fields: [receiverId], references: [id])
  attachments       MessageAttachment[]
}

// Model zaÅ‚Ä…cznikÃ³w do wiadomoÅ›ci
model MessageAttachment {
  id         String   @id @default(cuid())
  messageId  String
  fileName   String
  fileSize   Int
  fileType   String
  filePath   String
  uploadedAt DateTime @default(now())
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

// ZarzÄ…dzanie produkcjÄ… - modele
model ProductionGuide {
  id            String            @id @default(cuid())
  title         String
  barcode       String            @unique
  description   String?
  deadline      DateTime? // Deadline for the production guide
  priority      String            @default("NORMAL") // NORMAL, LOW, HIGH, CRITICAL
  autoPriority  Boolean           @default(false) // Whether priority is automatically calculated
  attachments   Attachment[]      @relation("ProductionGuideAttachments")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  createdById   String
  createdBy     User              @relation("CreatedGuides", fields: [createdById], references: [id])
  status        String            @default("DRAFT") // DRAFT, IN_PROGRESS, COMPLETED, CANCELLED
  archivedAt    DateTime?
  archivedById  String?
  archivedBy    User?             @relation("ArchivedGuides", fields: [archivedById], references: [id])
  assignedUsers GuideAssignment[]

  // New relation to track changes
  changeHistory GuideChangeHistory[]

  // Add relation for GuideAccessLog
  accessLogs GuideAccessLog[]

  // PowiÄ…zania
  steps     ProductionStep[]
  inventory GuideInventory[]

  // New relation for quality checks
  qualityChecks QualityCheck[]

  // New relation for production scheduling
  scheduleAssignments ScheduleAssignment[]

  // Indeksy
  @@index([barcode])
  @@index([createdById])
  @@index([status])
  @@index([priority])
  @@index([deadline])
}

model ProductionStep {
  id              String            @id @default(cuid())
  guideId         String
  guide           ProductionGuide   @relation(fields: [guideId], references: [id], onDelete: Cascade)
  title           String
  description     String?
  order           Int               @default(0)
  estimatedTime   Int? // Planned minutes for this step
  actualTime      Int? // Actual minutes spent (sum of workEntries)
  status          String            @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  assignedToRole  String? // Role this step is assigned to
  comments        StepComment[]
  workSessions    StepWorkSession[]
  attachments     Attachment[]      @relation("StepAttachments")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  stepAssignments StepAssignment[]

  // Relations
  workEntries   StepWorkEntry[] // Individual work entries from users
  stepInventory StepInventory[] // Items needed for this step

  // OCR relation
  ocrResults OcrResult[]

  // New relation for quality checks
  qualityChecks QualityCheck[]

  // New relation for production scheduling
  scheduleAssignments ScheduleAssignment[]

  @@index([guideId])
  @@index([status])
  @@index([assignedToRole])
}

model StepComment {
  id          String             @id @default(cuid())
  stepId      String
  step        ProductionStep     @relation(fields: [stepId], references: [id], onDelete: Cascade)
  content     String
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  recipients  CommentRecipient[]
  attachments Attachment[]       @relation("CommentAttachments")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([stepId])
  @@index([userId])
}

model CommentRecipient {
  id        String      @id @default(cuid())
  commentId String
  comment   StepComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())

  @@index([commentId])
  @@index([userId])
  @@index([isRead])
}

model StepWorkSession {
  id        String         @id @default(cuid())
  stepId    String
  step      ProductionStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  startTime DateTime
  endTime   DateTime?
  duration  Int? // Czas w sekundach
  note      String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([stepId])
  @@index([userId])
  @@index([startTime])
}

model StepAssignment {
  id        String   @id @default(cuid())
  stepId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  step ProductionStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  user User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([stepId, userId])
  @@index([userId])
  @@index([stepId])
}

model Attachment {
  id                String           @id @default(cuid())
  filename          String
  path              String
  size              Int
  mimeType          String
  // Relacje do innych modeli
  productionGuideId String?
  productionGuide   ProductionGuide? @relation("ProductionGuideAttachments", fields: [productionGuideId], references: [id], onDelete: SetNull)
  productionStepId  String?
  productionStep    ProductionStep?  @relation("StepAttachments", fields: [productionStepId], references: [id], onDelete: SetNull)
  commentId         String?
  comment           StepComment?     @relation("CommentAttachments", fields: [commentId], references: [id], onDelete: SetNull)
  inventoryItemId   String?
  inventoryItem     InventoryItem?   @relation("InventoryAttachments", fields: [inventoryItemId], references: [id], onDelete: SetNull)
  createdById       String
  createdBy         User             @relation(fields: [createdById], references: [id])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // New relation for quality checks
  qualityCheckId String?
  qualityCheck   QualityCheck? @relation("QualityCheckAttachments", fields: [qualityCheckId], references: [id], onDelete: SetNull)

  @@index([productionGuideId])
  @@index([productionStepId])
  @@index([commentId])
  @@index([inventoryItemId])
  @@index([createdById])
}

// Modele dla zarzÄ…dzania magazynem
model InventoryItem {
  id          String       @id @default(cuid())
  name        String
  description String?
  barcode     String       @unique
  unit        String // pieces, kg, liters, meters, etc.
  quantity    Float        @default(0)
  location    String? // Miejsce w magazynie
  minQuantity Float? // Minimalna iloÅ›Ä‡, ktÃ³ra powinna byÄ‡ dostÄ™pna
  attachments Attachment[] @relation("InventoryAttachments")
  category    String?
  createdById String
  createdBy   User         @relation("CreatedInventoryItems", fields: [createdById], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())

  price Float?

  // PowiÄ…zania
  transactions InventoryTransaction[]
  guideItems   GuideInventory[]

  // Relations
  stepInventory StepInventory[]

  @@index([barcode])
  @@index([createdById])
  @@index([category])
}

model InventoryTransaction {
  id        String        @id @default(cuid())
  itemId    String
  item      InventoryItem @relation(fields: [itemId], references: [id])
  quantity  Float // IloÅ›Ä‡ (dodatnia dla dodania, ujemna dla pobrania)
  type      String // ADD, REMOVE, RESERVE, RELEASE
  reason    String? // PowÃ³d transakcji
  guideId   String? // Opcjonalne odniesienie do przewodnika produkcyjnego
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())

  @@index([itemId])
  @@index([userId])
  @@index([type])
  @@index([guideId])
}

model GuideInventory {
  id        String          @id @default(cuid())
  guideId   String
  guide     ProductionGuide @relation(fields: [guideId], references: [id], onDelete: Cascade)
  itemId    String
  item      InventoryItem   @relation(fields: [itemId], references: [id])
  quantity  Float // IloÅ›Ä‡ potrzebna do produkcji
  stepId    String? // Opcjonalne powiÄ…zanie z konkretnym etapem
  reserved  Boolean         @default(true) // Czy przedmiot jest zarezerwowany
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())

  // Add the missing relation field for User.withdrawnItems
  withdrawnById String?
  withdrawnBy   User?   @relation("WithdrawnItems", fields: [withdrawnById], references: [id])
  withdrawnDate DateTime? // Data pobrania przedmiotu

  @@unique([guideId, itemId])
  @@index([guideId])
  @@index([itemId])
  @@index([stepId])
  @@index([reserved])
  @@index([withdrawnById])
}

model GuideAssignment {
  guideId String
  userId  String

  guide ProductionGuide @relation(fields: [guideId], references: [id], onDelete: Cascade)
  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([guideId, userId]) // Klucz zÅ‚oÅ¼ony
  @@index([guideId])
  @@index([userId])
}

// Models from the updated schema
model GuideChangeHistory {
  id         String          @id @default(cuid())
  guideId    String
  guide      ProductionGuide @relation(fields: [guideId], references: [id], onDelete: Cascade)
  userId     String
  user       User            @relation(fields: [userId], references: [id])
  changeType String // "CREATE", "UPDATE", "DELETE"
  fieldName  String // Which field was changed
  oldValue   String? // Previous value (JSON stringified if needed)
  newValue   String? // New value (JSON stringified if needed)
  createdAt  DateTime        @default(now())

  @@index([guideId])
  @@index([userId])
}

model StepWorkEntry {
  id         String         @id @default(cuid())
  stepId     String
  step       ProductionStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  timeWorked Int // Minutes worked
  notes      String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([stepId])
  @@index([userId])
}

model StepInventory {
  id        String         @id @default(cuid())
  stepId    String
  step      ProductionStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  itemId    String
  item      InventoryItem  @relation(fields: [itemId], references: [id])
  quantity  Float // Quantity needed for this step
  status    String         @default("NEEDED") // NEEDED, RESERVED, ISSUED
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())

  @@index([stepId])
  @@index([itemId])
  @@index([status])
}

// OCR Result model for storing OCR processed text
model OcrResult {
  id             String          @id @default(cuid())
  filePath       String
  fileName       String
  text           String          @db.Text
  confidence     Float
  manuallyEdited Boolean         @default(false)
  stepId         String?
  step           ProductionStep? @relation(fields: [stepId], references: [id], onDelete: SetNull)
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())

  @@index([stepId])
  @@index([userId])
}

// New model for tracking guide access
model GuideAccessLog {
  id         String          @id @default(cuid())
  guideId    String
  guide      ProductionGuide @relation(fields: [guideId], references: [id], onDelete: Cascade)
  userId     String
  user       User            @relation("UserGuideAccessLogs", fields: [userId], references: [id])
  accessedAt DateTime        @default(now())

  @@index([guideId])
  @@index([userId])
  @@index([accessedAt])
}

// New models for quality control
model QualityCheckTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  items       Json // Array of questions/checks
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  qualityChecks QualityCheck[]
}

model QualityCheck {
  id          String               @id @default(cuid())
  templateId  String
  template    QualityCheckTemplate @relation(fields: [templateId], references: [id])
  guideId     String?
  guide       ProductionGuide?     @relation(fields: [guideId], references: [id], onDelete: SetNull)
  stepId      String?
  step        ProductionStep?      @relation(fields: [stepId], references: [id], onDelete: SetNull)
  userId      String
  user        User                 @relation(fields: [userId], references: [id])
  results     Json // Results of the checks
  passed      Boolean              @default(false)
  notes       String?
  attachments Attachment[]         @relation("QualityCheckAttachments")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@index([templateId])
  @@index([guideId])
  @@index([stepId])
  @@index([userId])
  @@index([passed])
}

// New models for production scheduling
model ProductionSchedule {
  id          String               @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  assignments ScheduleAssignment[]
  createdById String
  createdBy   User                 @relation(fields: [createdById], references: [id])
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  isActive    Boolean              @default(true)

  @@index([startDate])
  @@index([endDate])
  @@index([createdById])
  @@index([isActive])
}

model ScheduleAssignment {
  id         String             @id @default(cuid())
  scheduleId String
  schedule   ProductionSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  userId     String
  user       User               @relation(fields: [userId], references: [id])
  guideId    String?
  guide      ProductionGuide?   @relation(fields: [guideId], references: [id], onDelete: SetNull)
  stepId     String?
  step       ProductionStep?    @relation(fields: [stepId], references: [id], onDelete: SetNull)
  startDate  DateTime
  endDate    DateTime
  status     String             @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, COMPLETED, CANCELLED
  notes      String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@index([scheduleId])
  @@index([userId])
  @@index([guideId])
  @@index([stepId])
  @@index([startDate])
  @@index([endDate])
  @@index([status])
}
